[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["console"]

[project]
name = "console"
version = "0.1.0"
description = "Spectrum Instrumentation Console for ultralow-field MRI with an interface to ScanHub."
authors = [
    {name = "David Schote", email = "david.schote@ptb.de"},
]
readme = "README.md"
requires-python = ">=3.10,<3.11"
dependencies = [
    "numpy==1.23.0",    # pypulseq release 1.4 incompatible with numpy 1.25
    "pypulseq==1.4.0",
    "plotly",
    "PyYAML",
    "matplotlib",
]

[project.optional-dependencies]
test = ["coverage", "codecov", "pre-commit"]
lint = ["mypy", "flake8", "Flake8-pyproject", "pylint", "isort", "autopep8", "pydocstyle", "black", "poethepoet"]
docs = ["sphinx", "sphinx_rtd_theme"]
examples = ["nbformat>=4.2.0", "ipykernel", "ipython"]

[tool.pydocstyle]
ignore-paths = ["console/spcm_control/py_header/.*$", "console/spcm_control/spcm/.*$"]
convention = "numpy"

[tool.pylint]
py-version = "3.10"
max-locals = 25
max-attributes = 20
max-line-length = 120
extension-pkg-allow-list = ["pydantic"]
disable = ["too-few-public-methods"]    # suppress warning at pydantic BaseModel and sqlalchemy ORM model
ignore-paths = ["console/spcm_control/py_header/.*$", "console/spcm_control/spcm/.*$"]

[tool.flake8]
max-line-length = 120
ignore-paths = ["console/spcm_control/py_header/.*$", "console/spcm_control/spcm/.*$"]

[tool.mypy]
python_version = "3.11"
ignore-paths = ["console/spcm_control/py_header/.*$", "console/spcm_control/spcm/.*$"]

[tool.black]
max-line-length = 120

# [tool.mypy-plotly]
# ignore_missing_imports = true   # missing 3rd party stubs

# [tool.mypy-pypulseq]
# ignore_missing_imports = true   # missing 3rd party stubs

[tool.poe.tasks]
lint.sequence = ["isort", "black", "pylint", "flake8", "mypy", "pydocstyle"]
lint.ignore_fail = "return_non_zero"

    [tool.poe.tasks.isort]
    help = "Run isort"
    cmd  = "isort console/"

    [tool.poe.tasks.black]
    help = "Run black"
    cmd  = "black console/"

    [tool.poe.tasks.pylint]
    help = "Run pylint"
    cmd  = "pylint console/"

    [tool.poe.tasks.mypy]
    help = "Run mypy"
    cmd  = "mypy console/"

    [tool.poe.tasks.flake8]
    help = "Run flake8"
    cmd  = "flake8 console/"

    [tool.poe.tasks.pydocstyle]
    help = "Run pydocstyle"
    cmd  = "pydocstyle console/"