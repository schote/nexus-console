[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["console"]
package-dir = {"" = "src"}

[project]
name = "nexus-console"
version = "0.0.1"
description = "MRI Nexus console application to run pulseq sequences on Spectrum-Instrumentation measurement cards."
authors = [
    {name="David Schote", email="david.schote@ptb.de"},
    {name="Berk Silemek", email="berk.silemek@ptb.de"}
]
readme = "README.md"
requires-python = ">=3.10,<3.11"
license = { file = "LICENSE" }
keywords = ["MRI, console, spectrum-instrumentation, acquisition, pulseq"]

classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
]

dependencies = [
    "pypulseq",
    # "pypulseq@git+https://github.com/imr-framework/pypulseq#egg=dev",
    "numpy",    # "numpy==1.23.0" for pypulseq master release 1.4
    "plotly",
    "PyYAML",
    "matplotlib",
    "pandas",
    "ismrmrd"
]

# Dependency groupds (optional)
[project.optional-dependencies]
test = ["pytest", "pytest-cov", "pytest-xdist", "coverage", "codecov"]
lint = ["mypy", "ruff", "types-PyYAML"]
docs = ["sphinx", "pydata-sphinx-theme", "sphinx-pyproject", "sphinx-design"]
dev = ["line_profiler[ipython]", "nbformat>=4.2.0", "ipykernel", "ipython", "ipywidgets"]


[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = [".", "src"]


[tool.mypy]
warn_return_any = false
check_untyped_defs = true
warn_no_return = true
warn_unreachable = true
python_version = "3.10"
ignore_missing_imports = true
mypy_path = "console"
exclude = ["docs"]


[tool.ruff]
# Use "ruff check --preview" to also show check for rules which are in preview (e.g. whitespaces)
src = ["src"]
line-length = 120
indent-width = 4
target-version = "py310"
extend-exclude = ["src/console/spcm_control/spcm", "docs"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint]
# Enable linters
# E = pycodestyle (error)
# W = pycodestyle (warning)
# F = Pyflakes
# S = flake8-bandit
# I = isort
# N = pep8-naming
# D = pydocstyle
# NPY = numpy specific rules
select = ["E", "W", "F", "S", "I", "N", "D", "NPY"]


[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-statements = 50

[tool.ruff.lint.pydocstyle]
convention = "numpy"
